@page "/login"
@using CarBiddingSite.Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject AppDbContext appDbContext;
@inject NavigationManager navigationManager;
<h1>
    Login
</h1>
<div class="login-container">
    <EditForm Model="@Model" OnValidSubmit="HandleLogin" FormName="LoginForm">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="Model.UserName" />
            <ValidationMessage For="@(() => Model.UserName)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div>
            <span class="text-danger">@ErrorMessage</span>
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();
    private string ?ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        var userAccount = appDbContext.Users.Where(x => x.UserName == Model.UserName).FirstOrDefault();

        if (userAccount is null || userAccount.Password!=Model.Password)
        {
            ErrorMessage = "Invalid Username or Password";
            return;
        }


        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name,Model.UserName),
            new Claim(ClaimTypes.Role,userAccount.Role is not null ? userAccount.Role : "User")
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");

    }


}
