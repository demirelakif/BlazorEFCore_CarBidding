@page "/register"
@using CarBiddingSite.Models.ViewModels
@using CarBiddingSite.Models
@inject AppDbContext appDbContext;
@inject NavigationManager navigationManager;

<h1>
    Register
</h1>
<div class="login-container">
    <EditForm Model="@Model" OnValidSubmit="HandleRegister" FormName="RegisterForm">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="Model.UserName" />
            <ValidationMessage For="@(() => Model.UserName)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div>
            <span class="text-danger">@ErrorMessage</span>
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();
    private string ?ErrorMessage { get; set; }


    private async Task HandleRegister()
    {
        var users = appDbContext.Users.Where(x => x.UserName == Model.UserName).FirstOrDefault();
        if (users is null && Model.UserName is not null && Model.Password is not null)
        {

            User newUser = new User { UserName = Model.UserName, Password = Model.Password };
            Console.WriteLine(newUser.UserName);
            await appDbContext.Users.AddAsync(newUser);
            await appDbContext.SaveChangesAsync();
            navigationManager.NavigateTo("/listings");
        }
        else
        {
            ErrorMessage = "Username is not usable";
        }

    }

}
