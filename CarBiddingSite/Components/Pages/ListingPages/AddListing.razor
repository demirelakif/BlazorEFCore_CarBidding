@page "/addCar"
@using CarBiddingSite.Models
@using CarBiddingSite.Models.CarModels
@using CarBiddingSite.Models.ViewModels
@using CarBiddingSite.Services;
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CarService _carService
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "User,Admin")]
@rendermode InteractiveServer

<h3>Add Listing</h3>

<EditForm Model="@Model" OnValidSubmit="HandleAddListing" FormName="AddListingForm">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="brand">Car Brand:</label>
        <select id="brand" class="form-control" @onchange="OnBrandChanged">
            <option value="">Select a Brand</option>
            @foreach (var brand in CarBrands)
            {
                <option value="@brand.Id">@brand.Name</option>
            }
        </select>


        <ValidationMessage For="@(() => Model.SelectedBrandId)" />
    </div>

    <div class="form-group">
        <label for="model">Car Model:</label>
        <select id="model" class="form-control" @bind="Model.SelectedModelId">
            <option value="">Select a Model</option>
            @foreach (var model in CarModels)
            {
                <option value="@model.Id">@model.ModelName</option>
            }
        </select>
        <ValidationMessage For="@(() => Model.SelectedModelId)" />
    </div>

@*     <div class="form-group">
        <label for="damageRecord">Damage Record:</label>
        <select id="damageRecord" class="form-control" @bind="Model.SelectedDamageRecordId">
            <option value="">Select Damage Record</option>
            @foreach (var damage in DamageRecords)
            {
                <option value="@damage.Id">@damage.DamageType</option>
            }
        </select>
        <ValidationMessage For="@(() => Model.SelectedDamageRecordId)" />
    </div> *@

    <div class="form-group">
        <label for="km">Kilometers:</label>
        <InputNumber id="km" class="form-control" @bind-Value="Model.Car.Km" />
        <ValidationMessage For="@(() => Model.Car.Km)" />
    </div>

    @*     <div class="form-group">
    <label for="color">Color:</label>
    <select id="color" class="form-control" @bind="Model.Car.Color">
    @foreach (var color in Enum.GetValues<Color>())
    {
    <option value="@color">@color</option>
    }
    </select>
    <ValidationMessage For="@(() => Model.Car.Color)" />
    </div> *@

    <div class="form-group">
        <label for="year">Year:</label>
        <InputNumber id="year" class="form-control" @bind-Value="Model.Car.Year" />
        <ValidationMessage For="@(() => Model.Car.Year)" />
    </div>

    <div class="form-group">
        <label for="image">Image URL:</label>
        <InputText id="image" class="form-control" @bind-Value="Model.ImageUrl" />
        <ValidationMessage For="@(() => Model.ImageUrl)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Listing</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public ListingViewModel Model { get; set; } = new();
    private List<CarBrand> CarBrands { get; set; } = new List<CarBrand>();
    private List<CarModel> CarModels { get; set; } = new List<CarModel>();
    // private List<DamageRecord> DamageRecords { get; set; } = new List<DamageRecord>();

    protected override async Task OnInitializedAsync()
    {
        CarBrands = await _carService.GetAllCarBrandsAsync();
        // Console.WriteLine(CarBrands);
        //DamageRecords = await _carService.GetAllDamageRecordsAsync();
    }

    private async Task OnBrandChanged(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var brandId))
        {
            Console.WriteLine($"BrandId: {brandId}");
            CarModels = await _carService.GetCarModelsByBrandIdAsync(brandId);
            Console.WriteLine("Car Modelleri Sayısı:", CarModels.Count());
            StateHasChanged(); // Refresh the view to show the new models
        }
        else
        {
            Console.WriteLine("Invalid or missing brand ID.");
        }
    }


    private async Task HandleAddListing()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = appDbContext.Users
            .Where(u => u.UserName == authenticationState.User.Identity.Name)
            .FirstOrDefault();

        if (user == null)
        {
            Console.WriteLine("User not found.");
            return;
        }

        var carModel = appDbContext.CarModels.Where(m => m.Id == Model.SelectedModelId).FirstOrDefault();
        var carBrand = appDbContext.CarBrands.Where(b => b.Id == Model.SelectedBrandId).FirstOrDefault();

        var newCar = new Car
            {
                Brand = carBrand,
                Model = carModel,
                Km = Model.Car.Km,
                Year = Model.Car.Year,

            };

        var newListing = new Listing
            {
                Title = Model.Title,
                Description = Model.Description,
                Price = Model.Price,
                ImageUrl = Model.ImageUrl,
                UserId = user.Id,
                Car = newCar
                // Add additional properties if needed
            };

        await _carService.AddCarAsync(newCar);
        navigationManager.NavigateTo("/cars");
    }
}
