@using CarBiddingSite.Models;
@using CarBiddingSite.Services;
@inject CarService carService;
@inject ListingServices listingServices;
@inject AppDbContext appDbContext;
@page "/listings/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager navigationManager;

@if (listing is null)
{
    <div class="text-center">
        <p>No car in here</p>
    </div>
}
else
{
    @if (ShowAlert)
    {
        <Alert Color="AlertColor.Success">
            <h4 class="alert-heading">Well done!</h4>
            <p>Your offer is sent to owner</p>
            <hr>
            <p class="mb-0">If owner accept your offer price : @_OfferPrice, We will contact you! </p>
        </Alert>
    }
    @if (ShowEdit)
    {
        <div class="overlay">
            <div class="edit-form">
                <h2>Edit Car</h2>
                <div class="form-group">
                    <label>Title:</label>
                    <input @bind="updatedListing.Title" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Price:</label>
                    <input type="number" @bind="updatedListing.Price" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Description:</label>
                    <textarea @bind="updatedListing.Description" class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <label>Image URL:</label>
                    <input @bind="updatedListing.ImageUrl" class="form-control" />
                </div>
                <div class="mt-3">
                    <button class="btn btn-success" @onclick="HandleUpdate">Update</button>
                    <button class="btn btn-secondary" @onclick="CloseEdit">Cancel</button>
                </div>
            </div>
        </div>
    }


    @if (!ShowEdit)
    {
        @if (!ShowOffer)
        {


            <div class="container mt-5">
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-primary mb-4" @onclick="EditCar">Edit</button>
                    </Authorized>
                </AuthorizeView>

                <div class="row">
                    <!-- Car Image -->
                    <div class="col-md-6">
                        <img src="@listing.ImageUrl" alt="Listing Image" class="img-fluid rounded" />
                    </div>
                    <!-- Car Details -->
                    <div class="col-md-6">
                        <div class="card shadow-lg p-4">
                            <div class="mt-4 d-flex justify-content-between align-items-center">
                                <h3>@listing.Title</h3>
                                <button @onclick="ShowOfferInput" class="btn btn-success btn-lg ms-2 fs-5 fw-bolder">Make Offer</button>
                            </div>

                            <h5>@FormatPrice(listing.Price) TL</h5>
                            <ul class="list-group">
                                <li class="list-group-item"><strong>Brand:</strong> @listing.Car.Brand.Name</li>
                                <li class="list-group-item"><strong>Origin Country:</strong> @listing.Car.Brand.OriginCountry</li>
                                <li class="list-group-item"><strong>Model:</strong> @listing.Car.Model.ModelName</li>
                                <li class="list-group-item"><strong>Horsepower:</strong> @listing.Car.Model.HP HP</li>
                                <li class="list-group-item"><strong>Km:</strong> @FormatPrice(listing.Car.Km) Km</li>
                                <li class="list-group-item"><strong>Color:</strong> @listing.Car.Color</li>
                            </ul>

                            <!-- Damage Records -->
                            <div class="mt-4">
                                <h5>Damage Records:</h5>
                                @if (listing.Car.DamageRecords != null && listing.Car.DamageRecords.Any())
                                {
                                    <ul class="list-group">
                                        @foreach (var damage in listing.Car.DamageRecords)
                                        {
                                            <li class="list-group-item">
                                                <strong>Date:</strong> @damage.Time.Value.ToString("dd-MMM-yyyy")<br />
                                                <strong>Type:</strong> @damage.DamageType<br />
                                                <strong>Description:</strong> @damage.Description
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>No damage records available.</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <div class="card shadow-lg p-4">
                        <h4>Description</h4>
                        <p>@listing.Description</p>
                    </div>
                </div>


            </div>
        }
        else
        {
            <div class="overlay">
                <div class="edit-form">
                    <h2>@listing.Title</h2>
                    <h2>Price : @FormatPrice(listing.Price)</h2>
                    <h2>Your Offer:</h2>
                    <div class="form-group">
                        <label>Price:</label>
                        <input type="number" @bind="_OfferPrice" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Message(Description):</label>
                        <input type="text" @bind="OfferDescription" class="form-control" />
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-success" @onclick="()=>{HandleOfferButton(listing.Id,listing.UserId);}">Offer</button>
                        <button class="btn btn-secondary" @onclick="()=>{ShowOffer=false;}">Cancel</button>
                    </div>
                </div>
            </div>
        }
    }
}

@code {
    [Parameter]
    public int id { get; set; }
    private Listing? listing;
    private Listing updatedListing;
    private string? OfferDescription { get; set; }
    private Offer? offer { get; set; }
    private decimal _OfferPrice { get; set; }
    private User? AuthenticatedUser { get; set; }
    private bool ShowEdit = false;
    private bool ShowOffer = false;
    private bool ShowAlert = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var username = authenticationState.User.Identity.Name;
        AuthenticatedUser = appDbContext.Users.FirstOrDefault(u => u.UserName == username);
        listing = await listingServices.GetListingByIdNew(id);
        if (listing?.Car != null)
        {
            Console.WriteLine(listing.Car.Km);  // Artık null değil, Km değerine erişebilirsiniz
        }

        updatedListing = listing != null ? new Listing
            {
                Title = listing.Title,
                Price = listing.Price,
                Description = listing.Description,
                ImageUrl = listing.ImageUrl,
                Car = listing.Car
            } : new Listing();
    }


    private string FormatPrice(decimal? price)
    {
        if (price is null)
        {
            throw new ArgumentNullException(nameof(price));
        }
        else
        {
            return price.Value.ToString("N0");
        }
    }

    private void EditCar()
    {
        ShowEdit = true;
    }

    private async Task HandleUpdate()
    {
        if (listing != null)
        {
            updatedListing.Id = listing.Id;
            await listingServices.UpdateListingAsync(updatedListing);
            listing = updatedListing;
            ShowEdit = false;
        }
    }

    private void ShowOfferInput()
    {
        ShowOffer = true;
    }

    private async Task HandleOfferButton(int listingId, int userToId)
    {
        if (AuthenticatedUser is not null)
        {
            offer = new Offer { ListingId = listingId, UserFromId = AuthenticatedUser.Id, UserToId = userToId, OfferPrice = _OfferPrice, Description = OfferDescription };
            await listingServices.MakeOfferAsync(offer);
            ShowOffer = false;
            ShowAlert = true;
            StateHasChanged();

        }
        

    }

    private void CloseEdit()
    {
        ShowEdit = false;
    }
}
